const express = require('express');
const twilio = require('twilio');
const Paystack = require('paystack-api');
const dotenv = require('dotenv');
const bodyParser = require('body-parser');

// Load environment variables from .env file
dotenv.config();

const app = express();
const port = 3000;

// Twilio setup
const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

// Paystack setup
const paystack = new Paystack(process.env.PAYSTACK_SECRET_KEY);

// Middleware to parse JSON bodies
app.use(bodyParser.json());

// Route to initiate SMS verification with Twilio
app.post('/send-verification', (req, res) => {
    const phoneNumber = req.body.phoneNumber;

    if (!phoneNumber) {
        return res.status(400).json({ message: 'Phone number is required' });
    }

    client.verify.services(process.env.TWILIO_VERIFY_SID)
        .verifications.create({
            to: phoneNumber,
            channel: 'sms'
        })
        .then(verification => {
            res.json({ message: 'Verification code sent successfully' });
        })
        .catch(error => {
            res.status(500).json({ message: 'Error sending verification', error: error.message });
        });
});

// Route to verify the code entered by the user
app.post('/verify-code', (req, res) => {
    const phoneNumber = req.body.phoneNumber;
    const code = req.body.code;

    if (!phoneNumber || !code) {
        return res.status(400).json({ message: 'Phone number and code are required' });
    }

    client.verify.services(process.env.TWILIO_VERIFY_SID)
        .verificationChecks.create({
            to: phoneNumber,
            code: code
        })
        .then(verification_check => {
            if (verification_check.status === 'approved') {
                res.json({ message: 'Phone number verified successfully' });
            } else {
                res.status(400).json({ message: 'Invalid verification code' });
            }
        })
        .catch(error => {
            res.status(500).json({ message: 'Error verifying code', error: error.message });
        });
});

// Route to handle Paystack payment
app.post('/pay', (req, res) => {
    const { email, amount } = req.body;

    if (!email || !amount) {
        return res.status(400).json({ message: 'Email and amount are required' });
    }

    const paystackReference = Math.floor(Math.random() * 1000000).toString();

    paystack.transaction.initialize({
        email: email,
        amount: amount * 100, // Paystack expects amount in kobo
        reference: paystackReference,
    })
    .then(response => {
        res.json({ message: 'Payment initialized successfully', reference: paystackReference });
    })
    .catch(error => {
        res.status(500).json({ message: 'Error initializing payment', error: error.message });
    });
});

// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
TWILIO_ACCOUNT_SID=your_account_sid
TWILIO_AUTH_TOKEN=your_auth_token
TWILIO_VERIFY_SID=your_verify_sid
PAYSTACK_PUBLIC_KEY=your_paystack_public_key
PAYSTACK_SECRET_KEY=your_paystack_secret_key
